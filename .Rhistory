S=sample(1:144,n,replace=TRUE)
X=matrix(1:144,ncol=12)*0
for(k in 1:144){
j=(S[k]%%12)+1
i=((S[k]-(j-1))/12)+1
X[i,j]=1+X[i,j]
}
sum(X)
length(S)
S=sample(1:144,n,replace=TRUE)
X=matrix(1:144,ncol=12)*0
for(k in 1:144){
j=(S[k]%%12)+1
i=((S[k]-(j-1))/12)+1
X[i,j]=1+X[i,j]
}
sum(X)
length(S)
S=sample(1:144,n,replace=TRUE)
X=matrix(1:144,ncol=12)*0
for(k in 1:144){
j=(S[k]%%12)+1
i=((S[k]-(j-1))/12)+1
X[i,j]=1+X[i,j]
}
sum(X)
length(S)
S=sample(1:144,n,replace=TRUE)
X=matrix(1:144,ncol=12)*0
for(k in 1:144){
j=(S[k]%%12)+1
i=((S[k]-(j-1))/12)+1
X[i,j]=1+X[i,j]
}
sum(X)
length(S)
S=sample(1:144,n,replace=TRUE)
X=matrix(1:144,ncol=12)*0
for(k in 1:144){
j=(S[k]%%12)+1
i=((S[k]-(j-1))/12)+1
X[i,j]=1+X[i,j]
}
sum(X)
length(S)
S=sample(1:144,n,replace=TRUE)
X=matrix(1:144,ncol=12)*0
for(k in 1:144){
j=(S[k]%%12)+1
i=((S[k]-(j-1))/12)+1
X[i,j]=1+X[i,j]
}
sum(X)
length(S)
S=sample(1:144,n,replace=TRUE)
X=matrix(1:144,ncol=12)*0
for(k in 1:144){
j=(S[k]%%12)+1
i=((S[k]-(j-1))/12)+1
X[i,j]=1+X[i,j]
}
sum(X)
length(S)
S=sample(1:144,n,replace=TRUE)
X=matrix(1:144,ncol=12)*0
for(k in 1:144){
j=(S[k]%%12)+1
i=((S[k]-(j-1))/12)+1
X[i,j]=1+X[i,j]
}
sum(X)
length(S)
S=sample(1:144,n,replace=TRUE)
X=matrix(1:144,ncol=12)*0
for(k in 1:144){
j=(S[k]%%12)+1
i=((S[k]-(j-1))/12)+1
X[i,j]=1+X[i,j]
}
sum(X)
length(S)
S=sample(1:144,n,replace=TRUE)
X=matrix(1:144,ncol=12)*0
for(k in 1:144){
j=(S[k]%%12)+1
i=((S[k]-(j-1))/12)+1
X[i,j]=1+X[i,j]
}
sum(X)
length(S)
S=sample(1:144,n,replace=TRUE)
X=matrix(1:144,ncol=12)*0
for(k in 1:144){
j=(S[k]%%12)+1
i=((S[k]-(j-1))/12)+1
X[i,j]=1+X[i,j]
}
sum(X)
length(S)
S=sample(1:144,n,replace=TRUE)
X=matrix(1:144,ncol=12)*0
for(k in 1:144){
j=(S[k]%%12)+1
i=((S[k]-(j-1))/12)+1
X[i,j]=1+X[i,j]
}
sum(X)
length(S)
S=sample(1:144,n,replace=TRUE)
X=matrix(1:144,ncol=12)*0
for(k in 1:144){
j=(S[k]%%12)+1
i=((S[k]-(j-1))/12)+1
X[i,j]=1+X[i,j]
}
sum(X)
length(S)
S=sample(1:144,n,replace=TRUE)
X=matrix(1:144,ncol=12)*0
for(k in 1:144){
j=(S[k]%%12)+1
i=((S[k]-(j-1))/12)+1
X[i,j]=1+X[i,j]
}
sum(X)
length(S)
m=1000
F=0
n=82
for(a in 1:m){
S=sample(1:144,n,replace=TRUE)
X=matrix(1:144,ncol=12)*0
for(k in 1:144){
j=(S[k]%%12)+1
i=((S[k]-(j-1))/12)+1
X[i,j]=1+X[i,j]
}
sum(X)
length(S)
y.obs=rowSums(X)
x.obs=colSums(X)
q.obs=0
for(r in 1:12){
for(s in 1:12){
q.obs=q.obs+((X[r,s]-(x.obs[r]*y.obs[s])/n)^2)/((x.obs[r]*y.obs[s])/n)
}
}
q.obs
F[a]=q.obs
}
F
n=82
g=12
OBS=matrix(c(1,0,0,0,1,2,0,0,1,0,1,0,
1,0,0,1,0,0,0,0,0,1,0,2,
1,0,0,0,2,1,0,0,0,0,0,1,
3,0,2,0,0,0,1,0,1,3,1,1,
2,1,1,1,1,1,1,1,1,1,1,0,
2,0,0,0,1,0,0,0,0,0,0,0,
2,0,2,1,0,0,0,0,1,1,1,2,
0,0,0,3,0,0,1,0,0,1,0,2,
0,0,0,1,1,0,0,0,0,0,1,0,
1,1,0,2,0,0,1,0,0,1,1,0,
0,1,1,1,2,0,0,2,0,1,1,0,
0,1,1,0,0,0,1,0,0,0,0,0), byrow=T,nrow=g)
OBS
y.obs=rowSums(OBS)
y.obs
x.obs=colSums(OBS)
x.obs
q.obs=0
for(i in 1:12){
for(j in 1:12){
q.obs=q.obs+((OBS[i,j]-(x.obs[i]*y.obs[j])/n)^2)/((x.obs[i]*y.obs[j])/n)
}
}
q.obs
T=OBS
for(i in 1:12){
for(j in 1:12){
T[i,j]=x.obs[i]*y.obs[j]/n
}
}
T
P=OBS/n
P
S=sample(1:144,n,replace=TRUE,P)
X=OBS*0
for(k in 1:144){
j=(S[k]%%12)+1
i=((S[k]-(j-1))/12)+1
X[i,j]=1+X[i,j]
}
X
m=1000
F=0
for(a in 1:m){
S=sample(1:144,n,replace=TRUE,P)
X=OBS*0
for(k in 1:144){
j=S[k]%%12
i=(S[k]-j)/12
X[i,j]=1+X[i,j]
}
Y=((X-T)^2)/T
F[a]=sum(Y)
}
plot(ecdf(F))
H=rchisq(m, 121)
lines(ecdf(H))
n=82
g=12
OBS=matrix(c(1,0,0,0,1,2,0,0,1,0,1,0,
1,0,0,1,0,0,0,0,0,1,0,2,
1,0,0,0,2,1,0,0,0,0,0,1,
3,0,2,0,0,0,1,0,1,3,1,1,
2,1,1,1,1,1,1,1,1,1,1,0,
2,0,0,0,1,0,0,0,0,0,0,0,
2,0,2,1,0,0,0,0,1,1,1,2,
0,0,0,3,0,0,1,0,0,1,0,2,
0,0,0,1,1,0,0,0,0,0,1,0,
1,1,0,2,0,0,1,0,0,1,1,0,
0,1,1,1,2,0,0,2,0,1,1,0,
0,1,1,0,0,0,1,0,0,0,0,0), byrow=T,nrow=g)
OBS
y.obs=rowSums(OBS)
y.obs
x.obs=colSums(OBS)
x.obs
q.obs=0
for(i in 1:12){
for(j in 1:12){
q.obs=q.obs+((OBS[i,j]-(x.obs[i]*y.obs[j])/n)^2)/((x.obs[i]*y.obs[j])/n)
}
}
q.obs
T=OBS
for(i in 1:12){
for(j in 1:12){
T[i,j]=x.obs[i]*y.obs[j]/n
}
}
T
P=OBS/n
P
S=sample(1:144,n,replace=TRUE,P)
X=OBS*0
for(k in 1:144){
j=(S[k]%%12)+1
i=((S[k]-(j-1))/12)+1
X[i,j]=1+X[i,j]
}
X
m=1000
F=0
for(a in 1:m){
S=sample(1:144,n,replace=TRUE,P)
X=OBS*0
for(k in 1:144){
j=S[k]%%12
i=(S[k]-j)/12
X[i,j]=1+X[i,j]
}
Y=((X-T)^2)/T
F[a]=sum(Y)
}
plot(ecdf(F))
H=rchisq(m, 121)
lines(ecdf(H))
n=82
g=12
OBS=matrix(c(1,0,0,0,1,2,0,0,1,0,1,0,
1,0,0,1,0,0,0,0,0,1,0,2,
1,0,0,0,2,1,0,0,0,0,0,1,
3,0,2,0,0,0,1,0,1,3,1,1,
2,1,1,1,1,1,1,1,1,1,1,0,
2,0,0,0,1,0,0,0,0,0,0,0,
2,0,2,1,0,0,0,0,1,1,1,2,
0,0,0,3,0,0,1,0,0,1,0,2,
0,0,0,1,1,0,0,0,0,0,1,0,
1,1,0,2,0,0,1,0,0,1,1,0,
0,1,1,1,2,0,0,2,0,1,1,0,
0,1,1,0,0,0,1,0,0,0,0,0), byrow=T,nrow=g)
OBS
y.obs=rowSums(OBS)
y.obs
x.obs=colSums(OBS)
x.obs
q.obs=0
for(i in 1:12){
for(j in 1:12){
q.obs=q.obs+((OBS[i,j]-(x.obs[i]*y.obs[j])/n)^2)/((x.obs[i]*y.obs[j])/n)
}
}
q.obs
T=OBS
for(i in 1:12){
for(j in 1:12){
T[i,j]=x.obs[i]*y.obs[j]/n
}
}
T
P=OBS/n
P
S=sample(1:144,n,replace=TRUE,P)
X=OBS*0
for(k in 1:144){
j=(S[k]%%12)+1
i=((S[k]-(j-1))/12)+1
X[i,j]=1+X[i,j]
}
X
m=1000
F=0
for(a in 1:m){
S=sample(1:144,n,replace=TRUE,P)
X=OBS*0
for(k in 1:144){
j=S[k]%%12
i=(S[k]-j)/12
X[i,j]=1+X[i,j]
}
Y=((X-T)^2)/T
F[a]=sum(Y)
}
plot(ecdf(F))
H=rchisq(m, 121)
lines(ecdf(H))
OBS=matrix(c(1,0,0,0,1,2,0,0,1,0,1,0,
1,0,0,1,0,0,0,0,0,1,0,2,
1,0,0,0,2,1,0,0,0,0,0,1,
3,0,2,0,0,0,1,0,1,3,1,1,
2,1,1,1,1,1,1,1,1,1,1,0,
2,0,0,0,1,0,0,0,0,0,0,0,
2,0,2,1,0,0,0,0,1,1,1,2,
0,0,0,3,0,0,1,0,0,1,0,2,
0,0,0,1,1,0,0,0,0,0,1,0,
1,1,0,2,0,0,1,0,0,1,1,0,
0,1,1,1,2,0,0,2,0,1,1,0,
0,1,1,0,0,0,1,0,0,0,0,0), byrow=T,nrow=g)
P=OBS/n
m=1000
F=0
n=82
for(a in 1:m){
S=sample(1:144,n,replace=TRUE,c(P))
X=matrix(1:144,ncol=12)*0
for(k in 1:144){
j=(S[k]%%12)+1
i=((S[k]-(j-1))/12)+1
X[i,j]=1+X[i,j]
}
sum(X)
length(S)
y.obs=rowSums(X)
x.obs=colSums(X)
q.obs=0
for(r in 1:12){
for(s in 1:12){
q.obs=q.obs+((X[r,s]-(x.obs[r]*y.obs[s])/n)^2)/((x.obs[r]*y.obs[s])/n)
}
}
q.obs
F[a]=q.obs
}
F
plot(ecdf(F))
H=rchisq(m, 121)
lines(ecdf(H))
q()
pollutantmean("specdata", "nitrate", 23)
q()
install.packages("shiny")
library(shiny)
runExample("01_hello")
q()
q()
install.packages('reshape2')
nstall.packages('gridExtra')
install.packages('gridExtra')
options(rpubs.upload.method = "internal")
q()
dose.result
```
q()
library(swirl)
swirl()
0
qnorm(.975,mean=3,sd=2)
6.92
pnorm(1200,mean=1020,sd=50,lower.tail=FALSE)
pnorm((1200-1020)/50,lower.tail=FALSE)
qnorm(.75,mean=1020,sd=50)
.53
.53
ppois(3,2.5 * 4)
pbinom(5,1000,.01)
ppois(5,1000*.01)
q()
install.packages('manipulate')
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
q()
install.packages("manipulate")
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
library(manipulate)
?manipulate
q()
install.packages('caret')
require('caret')
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages('AppliedPredictiveModeling')
library(AppliedPredictiveModeling)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
library(ggplot2)
library(caret)
ncol(training)
which(sapply(adData,class)=="factor")
summary(training$diagnosis)
training$diagnosis = as.numeric(training$diagnosis)
p <- prcomp(training[,grep('^IL',names(training))])
p$rotation[,1:7]
qplot(1:length(p$sdev),p$sdev / sum(p$sdev))
which(cumsum(p$sdev) / sum(p$sdev) <= .9)
(cumsum(p$sdev) / sum(p$sdev))[8]
#Result here
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
trainSmall <- data.frame(training[,grep('^IL',names(training))],training$diagnosis)
testSmall <- data.frame(testing[,grep('^IL',names(testing))],testing$diagnosis)
preProc <- preProcess(trainSmall[-13],method="pca",thres=.8)
trainPC <- predict(preProc,trainSmall[-13])
testPC <- predict(preProc,testSmall[-13])
PCFit <- train(trainSmall$training.diagnosis~.,data=trainPC,method="glm")
NotPCFit <- train(trainSmall$training.diagnosis~.,data=trainSmall,method="glm")
PCTestPredict <- predict(PCFit,newdata=testPC)
NotPCTestPredict <- predict(NotPCFit,newdata=testSmall)
confusionMatrix(PCTestPredict,testSmall$testing.diagnosis)
confusionMatrix(NotPCTestPredict,testSmall$testing.diagnosis)
install.packages('e1071')
trainSmall <- data.frame(training[,grep('^IL',names(training))],training$diagnosis)
testSmall <- data.frame(testing[,grep('^IL',names(testing))],testing$diagnosis)
preProc <- preProcess(trainSmall[-13],method="pca",thres=.8)
trainPC <- predict(preProc,trainSmall[-13])
testPC <- predict(preProc,testSmall[-13])
PCFit <- train(trainSmall$training.diagnosis~.,data=trainPC,method="glm")
NotPCFit <- train(trainSmall$training.diagnosis~.,data=trainSmall,method="glm")
PCTestPredict <- predict(PCFit,newdata=testPC)
NotPCTestPredict <- predict(NotPCFit,newdata=testSmall)
confusionMatrix(PCTestPredict,testSmall$testing.diagnosis)
confusionMatrix(NotPCTestPredict,testSmall$testing.diagnosis)
q()
library(AppliedPredictiveModeling)
library(caret)
library(rattle)
library(rpart.plot)
library(randomForest)
url_raw_training <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
file_dest_training <- "pml-training.csv"
download.file(url=url_raw_training, destfile=file_dest_training, method="curl")
url_raw_training <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
download.file(url=url_raw_training, destfile=file_dest_training, method="curl")
q()
answers = rep("A", 20)
pml_write_files = function(x){
  n = length(x)
  for(i in 1:n){
    filename = paste0("problem_id_",i,".txt")
    write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
  }
}
pml_write_files(answers)
answers= c('B','A','B','A','A','E','D','B','A','A','B','C','B','A','E','E','A','B','B','B') 
answers
length(answers)
pml_write_files(answers)
q()
